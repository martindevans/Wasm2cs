using System.ComponentModel;
using JetBrains.Annotations;
using Spectre.Console.Cli;
using Wasm2cs;

var app = new CommandApp<ConvertWasmCommand>();
return app.Run(args);

[UsedImplicitly]
internal sealed class ConvertWasmCommand
    : Command<ConvertWasmCommand.Settings>
{
    [UsedImplicitly]
    public sealed class Settings
        : CommandSettings
    {
        [Description("Path to convert.")]
        [CommandArgument(0, "[inputPath]")]
        public required string InputPath { get; [UsedImplicitly] init; }

        [Description("Namespace for generated code.")]
        [CommandOption("-n|--namespace")]
        public required string NameSpace { get; [UsedImplicitly] init; }

        [Description("Path to write to. Defaults to stdout")]
        [CommandOption("-o|--output")]
        public string? OutputPath { get; [UsedImplicitly] init; }
    }

    public override int Execute(CommandContext context, Settings settings)
    {
        return Task.Run(async () =>
        {
            var input = settings.InputPath;

            var @namespace = settings.NameSpace;
            if (string.IsNullOrWhiteSpace(@namespace))
                @namespace = "Wasm2cs.Autogenerated";

            var name = Path.GetFileNameWithoutExtension(input);

            Console.WriteLine($"# Converting '{Path.GetFullPath(input)}' to '{(settings.OutputPath == null ? "stdout" : Path.GetFullPath(settings.OutputPath))}'");

            await using (var inputStream = File.OpenRead(input))
            {
                if (settings.OutputPath != null)
                {
                    await using (var outputStream = File.Create(settings.OutputPath))
                        await WasmConverter.Convert(name, @namespace, inputStream, outputStream);
                }
                else
                {
                    Console.WriteLine();
                    await WasmConverter.Convert(name, @namespace, inputStream, Console.Out);
                }

            }

            return 0;
        }).Result;
    }
}